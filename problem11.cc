#include <iostream>
#include <vector>
#include <algorithm>
#include <numeric>
#include <mdspan>

int main() {
    // Example 20x20 grid (replace with your actual data)
    std::vector<int> grid_data = {
        8, 2, 22, 97, 38, 15, 0, 40, 0, 75, 4, 5, 7, 78, 52, 12, 50, 77, 91, 8,
        49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 4, 56, 62, 0,
        81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 3, 49, 13, 36, 65,
        52, 70, 95, 23, 4, 60, 11, 42, 69, 24, 68, 56, 1, 32, 56, 71, 37, 2, 36, 91,
        22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80,
        24, 47, 32, 60, 99, 3, 45, 2, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50,
        32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70,
        67, 26, 20, 68, 2, 62, 12, 20, 95, 63, 94, 39, 63, 8, 40, 91, 66, 49, 94, 21,
        24, 55, 58, 5, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72,
        21, 36, 23, 9, 75, 0, 76, 44, 20, 48, 80, 55, 68, 2, 26, 70, 66, 90, 87, 49,
        67, 30, 24, 55, 70, 65, 85, 63, 48, 94, 16, 9, 1, 97, 2, 79, 79, 31, 46, 88,
        88, 54, 16, 80, 51, 49, 31, 37, 99, 29, 3, 75, 68, 25, 57, 91, 56, 98, 17, 81,
        15, 56, 6, 75, 41, 31, 28, 50, 98, 19, 87, 82, 25, 78, 98, 83, 16, 98, 24, 80,
        52, 28, 26, 3, 13, 23, 16, 46, 57, 40, 83, 43, 60, 41, 12, 70, 73, 65, 33, 80,
        19, 55, 1, 46, 63, 49, 69, 91, 72, 82, 8, 49, 31, 52, 56, 26, 95, 32, 37, 16,
        26, 33, 29, 77, 78, 93, 36, 80, 64, 52, 70, 95, 23, 4, 60, 11, 42, 69, 24, 68,
        56, 1, 32, 56, 71, 37, 2, 36, 91, 22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36,
        54, 22, 40, 40, 28, 66, 33, 13, 80, 24, 47, 32, 60, 99, 3, 45, 2, 44, 75, 33,
        53, 78, 36, 84, 20, 35, 17, 12, 50, 32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40,
        67, 59, 54, 70, 66, 18, 38, 64, 70, 67, 26, 20, 68, 2, 62, 12, 20, 95, 63, 94
    };

    constexpr size_t rows = 20;
    constexpr size_t cols = 20;

    std::mdspan<int, std::dynamic_extent, std::dynamic_extent> grid(grid_data.data(), rows, cols);

    long long max_product = 0;

    // Horizontal
    for (size_t i = 0; i < rows; ++i) {
        for (size_t j = 0; j <= cols - 4; ++j) {
            long long product = 1;
            for (size_t k = 0; k < 4; ++k) {
                product *= grid(i, j + k);
            }
            max_product = std::max(max_product, product);
        }
    }

    // Vertical
    for (size_t i = 0; i <= rows - 4; ++i) {
        for (size_t j = 0; j < cols; ++j) {
            long long product = 1;
            for (size_t k = 0; k < 4; ++k) {
                product *= grid(i + k, j);
            }
            max_product = std::max(max_product, product);
        }
    }
}
